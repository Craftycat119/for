class Figure:
    sides_count = 0

    def init(self, color=(0, 0, 0), *sides):
        if len(sides) != self.sides_count:
            sides = [1 for _ in range(self.sides_count)]
        self.__sides = list(sides)
        self.filled = False
        self.set_color(*color)
        
    def get_color(self):
        return self.__color
        
    def __is_valid_color(self, r, g, b):
        return all([0 <= value <= 255 for value in (r, g, b)])
        
    def set_color(self, r, g, b):
        if self.__is_valid_color(r, g, b):
            self.__color = [r, g, b]

    def __is_valid_sides(self, new_sides):
        return (
            len(new_sides) == self.sides_count and 
            all([side > 0 and isinstance(side, int) for side in new_sides])
        )
        
    def get_sides(self):
        return self.__sides

    
    def len(self):
        return sum(self.__sides)

        
    def set_sides(self, *new_sides):
        if self.__is_valid_sides(new_sides):
            self.__sides = list(new_sides)
            


class Circle(Figure):
    sides_count = 1

    def init(self, color=(0, 0, 0), radius=1):
        super().init(color, radius)
        self.__radius = radius

    def get_radius(self):
        return self.__radius

    def get_square(self):
        return pi * self.get_radius()**2
        

class Triangle(Figure):
    sides_count = 3

    def init(self, color=(0, 0, 0), *sides):
        super().init(color, *sides)
        
    def heron(a, b, c):
        s = (a + b + c) / 2
        area = sqrt(s * (s - a) * (s - b) * (s - c))
        return area

    def get_square(self):
        a, b, c = self.get_sides()
        return heron(a, b, c)
        
class Cube(Figure):
    sides_count = 12

    def init(self, color=(0, 0, 0), edge_length=1):
        super().init(color, *(edge_length for _ in range(self.sides_count)))

    def get_volume(self):
        edge_length = self.get_sides()[0]
        return edge_length**3
        
circle1 = Circle((200, 200, 100), 10) # (Цвет, стороны)
cube1 = Cube((222, 35, 130), 6)
# Проверка на изменение цветов:
circle1.set_color(55, 66, 77) # Изменится
print(circle1.get_color())
cube1.set_color(300, 70, 15) # Не изменится
print(cube1.get_color())
# Проверка на изменение сторон:
cube1.set_sides(5, 3, 12, 4, 5) # Не изменится
print(cube1.get_sides())
circle1.set_sides(15) # Изменится
print(circle1.get_sides())
# Проверка периметра (круга), это и есть длина:
print(len(circle1))
# Проверка объёма (куба):
print(cube1.get_volume())